import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';

const TAGS_KR = {
  spicy: 'Îß§Ïö¥Îßõ',
  value_for_money: 'Í∞ÄÏÑ±ÎπÑ',
  kindness: 'ÏπúÏ†àÎèÑ',
  cleanliness: 'Ï≤≠Í≤∞ÎèÑ',
  atmosphere: 'Î∂ÑÏúÑÍ∏∞',
  large_portions: 'Ìë∏ÏßêÌï®',
  tasty: 'ÎßõÏûàÏùå',
  waiting: 'Ïõ®Ïù¥ÌåÖ',
  sweet: 'Îã®Îßõ',
  salty: 'Ïß†Îßõ',
  savory: 'Í∞êÏπ†Îßõ',
  freshness: 'Ïã†ÏÑ†ÎèÑ',
  solo_dining: 'ÌòºÎ∞• Ï†ÅÌï©ÎèÑ',
  trendy: 'Ìä∏Î†åÎîîÌï®',
  parking: 'Ï£ºÏ∞® Ìé∏Î¶¨Ìï®',
};

const TAG_DESCRIPTIONS = {
  spicy: 'Îß§Ïö¥ ÏùåÏãùÏùÑ ÏÑ†Ìò∏ÌïòÎäî Ï†ïÎèÑ',
  value_for_money: 'Í∞ÄÍ≤© ÎåÄÎπÑ ÎßåÏ°±ÎèÑÎ•º Ï§ëÏöîÏãúÌïòÎäî Ï†ïÎèÑ',
  kindness: 'ÏßÅÏõêÏùò ÏπúÏ†àÌï®ÏùÑ ÏñºÎßàÎÇò Ï§ëÏöîÌïòÍ≤å ÏÉùÍ∞ÅÌïòÎäîÏßÄ',
  cleanliness: 'Îß§Ïû•Ïùò ÏúÑÏÉù ÏÉÅÌÉúÏóê ÎåÄÌïú ÎØºÍ∞êÎèÑ',
  atmosphere: 'Î∂ÑÏúÑÍ∏∞, Ïù∏ÌÖåÎ¶¨Ïñ¥ Îì± Í∞êÏÑ±Ï†ÅÏù∏ ÏöîÏÜåÏùò Ï§ëÏöîÎèÑ',
  large_portions: 'ÏùåÏãùÏùò ÏñëÏùÑ Ï§ëÏöîÌïòÍ≤å ÏÉùÍ∞ÅÌïòÎäî Ï†ïÎèÑ',
  tasty: 'Ï†ÑÎ∞òÏ†ÅÏù∏ ÏùåÏãùÏùò ÎßõÏóê ÎåÄÌïú Í∏∞ÎåÄÏπò',
  waiting: 'Í∏∞Îã§Î¶¨Îäî Í≤ÉÏóê ÎåÄÌïú ÏàòÏö©ÎèÑ',
  sweet: 'Îã®ÎßõÏùÑ ÏÑ†Ìò∏ÌïòÎäî Ï†ïÎèÑ',
  salty: 'Ïß†ÎßõÏùÑ ÏÑ†Ìò∏ÌïòÎäî Ï†ïÎèÑ',
  savory: 'Í∞êÏπ†ÎßõÏùÑ ÏÑ†Ìò∏ÌïòÎäî Ï†ïÎèÑ',
  freshness: 'Ïû¨Î£åÏùò Ïã†ÏÑ†ÎèÑÏóê ÎåÄÌïú ÎØºÍ∞êÎèÑ',
  solo_dining: 'ÌòºÎ∞•ÌïòÍ∏∞ Ï¢ãÏùÄÏßÄ Ïó¨Î∂ÄÎ•º ÏñºÎßàÎÇò Í≥†Î†§ÌïòÎäîÏßÄ',
  trendy: 'Ïù∏Ïä§ÌÉÄÍ∞êÏÑ±, Ìä∏Î†åÎîîÌï®Ïóê ÎåÄÌïú ÏÑ†Ìò∏ÎèÑ',
  parking: 'Ï£ºÏ∞® Ìé∏Î¶¨ÏÑ±ÏùÑ ÏñºÎßàÎÇò Ï§ëÏöîÌïòÍ≤å Ïó¨Í∏∞ÎäîÏßÄ',
};

const TAG_LIST = Object.keys(TAGS_KR);

export default function TagPreferenceSection({ tagScores, setTagScores }) {
  const handleScoreChange = (tag, value) => {
    setTagScores((prev) => ({
      ...prev,
      [tag]: value,
    }));
  };

  console.log(tagScores)

  return (
    <View style={styles.container}>
      <Text style={styles.title}>üçΩÔ∏è ÌÉúÍ∑∏ ÏÑ†Ìò∏ÎèÑ ÏÑ§Ï†ï</Text>
      <Text style={styles.subtitle}>
        ÎÇ¥ Ï∑®Ìñ•ÏùÑ Î∞òÏòÅÌï¥ Îçî Ï†ïÎ∞ÄÌïú Ï∂îÏ≤úÏùÑ Î∞õÏïÑÎ≥¥ÏÑ∏Ïöî.
      </Text>

      {TAG_LIST.map((tag) => (
        <View key={tag} style={styles.card}>
          <View style={styles.headerRow}>
            <Text style={styles.tagName}>{TAGS_KR[tag]}</Text>
            <Text style={styles.scoreText}>
              {tagScores?.[tag]}Ï†ê
            </Text>
          </View>

          <Text style={styles.description}>{TAG_DESCRIPTIONS[tag]}</Text>

          <View style={styles.buttonRow}>
            {[1, 2, 3, 4, 5].map((score) => (
              <TouchableOpacity
                key={score}
                style={[
                  styles.scoreButton,
                  tagScores?.[tag] === score && styles.scoreButtonSelected,
                ]}
                onPress={() => handleScoreChange(tag, score)}
              >
                <Text
                  style={[
                    styles.scoreButtonText,
                    tagScores?.[tag] === score && styles.scoreButtonTextSelected,
                  ]}
                >
                  {score}
                </Text>
              </TouchableOpacity>
            ))}
          </View>
        </View>
      ))}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    marginTop: 24,
    paddingHorizontal: 16,
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 4,
    color: '#222',
  },
  subtitle: {
    fontSize: 14,
    color: '#666',
    marginBottom: 20,
  },
  card: {
    backgroundColor: '#fff',
    borderRadius: 16,
    paddingVertical: 18,
    paddingHorizontal: 18,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.07,
    shadowRadius: 6,
    elevation: 2,
  },
  headerRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 6,
  },
  tagName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  scoreText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#007AFF',
  },
  description: {
    fontSize: 13,
    color: '#666',
    marginBottom: 12,
  },
  buttonRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  scoreButton: {
    width: 40,
    height: 36,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#ccc',
    justifyContent: 'center',
    alignItems: 'center',
    marginHorizontal: 2,
    backgroundColor: '#f5f5f5',
  },
  scoreButtonSelected: {
    backgroundColor: '#007AFF',
    borderColor: '#007AFF',
  },
  scoreButtonText: {
    fontSize: 15,
    fontWeight: '500',
    color: '#333',
  },
  scoreButtonTextSelected: {
    color: 'white',
  },
});
